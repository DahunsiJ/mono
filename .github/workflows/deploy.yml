name: Secure CI/CD Deployment

on:
  push:
    branches:
      - main

permissions:
  security-events: write

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run CodeQL Security Scan
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Run Conftest on Kubernetes Manifests
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/open-policy-agent/conftest/releases/latest | jq -r .tag_name | sed 's/v//')
          curl -LO https://github.com/open-policy-agent/conftest/releases/download/v${LATEST_VERSION}/conftest_${LATEST_VERSION}_Linux_x86_64.tar.gz
          tar -xzf conftest_${LATEST_VERSION}_Linux_x86_64.tar.gz
          sudo mv conftest /usr/local/bin/
          conftest --version
          
          if [ -d "policy" ]; then
            echo "Policy directory found, running Conftest tests...";
            conftest test infra/deployment.yml --policy policy/
          else
            echo "No policy directory found, skipping Conftest tests.";
          fi

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: security-checks
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Minikube
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          chmod +x minikube && sudo mv minikube /usr/local/bin/
          minikube start --driver=docker --force

      - name: Set up kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      - name: Build Docker Image (with Debugging)
        run: |
          eval $(minikube -p minikube docker-env)
          set -e  # Exit on error
          if ! docker build --no-cache -t dahunsij/secure_mono:latest .; then
            echo "Docker build failed! Running debug commands..."
            docker run -it --rm dahunsij/secure_mono:latest sh -c "npm install --only=production --loglevel verbose"
            exit 1  # Force failure for visibility
          fi

      - name: Install Trivy (Updated)
        run: |
          # Update package list and install required dependencies
          sudo apt-get update && sudo apt-get install -y wget jq
          
          # Fetch the latest Trivy release version dynamically
          LATEST_TRIVY_VERSION=$(curl -sL https://api.github.com/repos/aquasecurity/trivy/releases/latest | jq -r .tag_name)

          # Fallback to a stable version if fetching fails
          if [[ -z "$LATEST_TRIVY_VERSION" || "$LATEST_TRIVY_VERSION" == "null" ]]; then
              echo "Error: Unable to fetch latest Trivy version. Using fallback version 0.47.0."
              LATEST_TRIVY_VERSION="0.47.0"
          fi
          
          # Construct the correct download URL
          TRIVY_URL="https://github.com/aquasecurity/trivy/releases/download/${LATEST_TRIVY_VERSION}/trivy_${LATEST_TRIVY_VERSION}_Linux-64bit.tar.gz"
          
          # Download and install Trivy
          if ! wget "$TRIVY_URL" -O trivy.tar.gz; then
            echo "Error: Failed to download Trivy. Exiting..."
            exit 1
          fi
          
          tar -xzf trivy.tar.gz
          sudo mv trivy /usr/local/bin/
          rm -f trivy.tar.gz
          
          # Verify Trivy installation
          trivy --version

      - name: Scan Image with Trivy
        run: trivy image dahunsij/secure_mono:latest

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f infra/deployment.yml
          kubectl apply -f infra/service.yml
          kubectl apply -f infra/ingress.yml

      - name: Verify Deployment
        run: kubectl get pods -o wide
